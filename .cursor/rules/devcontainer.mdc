---
description: Devcontainer開発環境ルール（APPI関連法令KB）
globs: [".devcontainer/**/*", "docker-compose.yml", "Dockerfile"]
alwaysApply: true
---

# Devcontainer 開発環境ルール

## 基本方針

### コンテナ戦略
- **統一環境**: 全開発者が同一環境で作業
- **再現性**: 本番環境との差異を最小化
- **分離性**: ホストOSに依存しない開発環境
- **効率性**: 高速な起動・ビルド・実行

### ベースイメージ選択
- **公式イメージ優先**: Microsoft公式Devcontainerイメージ
- **最小構成**: 必要最小限のツール・ライブラリ
- **セキュリティ**: 定期的なベースイメージ更新

## ファイル構成ルール

### devcontainer.json
```json
{
  "name": "プロジェクト名（英語）",
  "dockerComposeFile": "docker-compose.yml",
  "service": "app",
  "workspaceFolder": "/workspace",
  
  "features": {
    // 必要最小限のfeatureのみ
  },
  
  "customizations": {
    "vscode": {
      "extensions": [
        // プロジェクト必須拡張機能のみ
      ],
      "settings": {
        // 統一コーディング規約
      }
    }
  }
}
```

### Dockerfile
```dockerfile
# 公式ベースイメージ使用
FROM mcr.microsoft.com/devcontainers/typescript-node:1-20-bookworm

# システム依存関係（必要最小限）
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends \
        # 具体的なパッケージ名
    && apt-get autoremove -y && apt-get clean -y

# 日本語環境（APPI関連で必須）
RUN sed -i '/ja_JP.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG=ja_JP.UTF-8

# セキュリティ：非rootユーザー
USER vscode
```

## VS Code 統合

### 必須拡張機能
- **TypeScript**: `ms-vscode.vscode-typescript-next`
- **ESLint**: `ms-vscode.vscode-eslint`
- **Prettier**: `esbenp.prettier-vscode`
- **Markdown**: `yzhang.markdown-all-in-one`
- **PDF**: `ms-vscode.vscode-pdf`（法令文書閲覧用）

### 統一設定
```json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "typescript.preferences.importModuleSpecifier": "relative",
  "files.associations": {
    "*.mdc": "markdown"
  }
}
```

### 禁止事項
- 個人設定の強制（theme等）
- 重い拡張機能（AI補完等は個人判断）
- 外部サービス連携（プライバシー考慮）

## パフォーマンス最適化

### ボリューム戦略
```yaml
volumes:
  # バインドマウント：永続化が必要
  - ../sources:/workspace/sources:cached
  - ../ingested:/workspace/ingested:cached
  
  # 名前付きボリューム：パフォーマンス重視
  - node_modules:/workspace/node_modules
```

### キャッシュ活用
```dockerfile
# 依存関係の事前インストール（レイヤーキャッシュ）
COPY package*.json ./
RUN npm ci --only=production=false
```

### メモリ・CPU推奨値
- **メモリ**: 4GB以上（PDF処理考慮）
- **CPU**: 2コア以上
- **ディスク**: 10GB以上

## セキュリティ

### ネットワーク制限
```yaml
networks:
  appi-kb-network:
    driver: bridge
    # 外部通信は官公庁サイトのみ
```

### 権限管理
- **非rootユーザー**: `vscode` ユーザーで実行
- **ファイル権限**: 適切な所有者設定
- **秘密情報**: 環境変数・Secretsで管理

### 外部通信
- **HTTPS必須**: 官公庁サイトへの通信のみ
- **プロキシ対応**: 企業環境での利用考慮
- **ログ記録**: アクセスログの保持

## 開発体験

### 自動化
```json
{
  "postCreateCommand": "npm install && npm run build",
  "postStartCommand": "echo '🚀 Ready! Run: npm run ingest'"
}
```

### エイリアス・ショートカット
```bash
# .zshrc に追加
alias ll="ls -la"
alias ingest="npm run ingest"
alias build="npm run build"
```

### ポート転送
```json
{
  "forwardPorts": [3000, 8080],
  "portsAttributes": {
    "3000": {
      "label": "Dev Server",
      "onAutoForward": "notify"
    }
  }
}
```

## トラブルシューティング

### 共通問題・解決策

#### 1. 権限エラー
```bash
# 症状：ファイル作成・編集ができない
# 解決：所有者修正
sudo chown -R vscode:vscode /workspace
```

#### 2. Node.js依存関係エラー
```bash
# 症状：npm install失敗
# 解決：キャッシュクリア
rm -rf node_modules package-lock.json
npm install
```

#### 3. 日本語文字化け
```bash
# 症状：PDF・HTMLの日本語が表示されない
# 解決：ロケール・フォント確認
locale
apt list --installed | grep fonts-noto
```

#### 4. メモリ不足
```bash
# 症状：PDF処理でプロセス終了
# 解決：Dockerメモリ制限緩和
# Docker Desktop > Settings > Resources > Memory
```

## メンテナンス

### 定期更新
- **月次**: ベースイメージ更新
- **四半期**: 拡張機能・依存関係見直し
- **年次**: Node.jsメジャーバージョン更新

### 更新手順
```bash
# 1. 設定変更
vim .devcontainer/devcontainer.json

# 2. リビルド
> Dev Containers: Rebuild Container

# 3. テスト実行
npm run test
npm run ingest -- --dry-run
```

### バックアップ・復旧
```bash
# 設定バックアップ
tar -czf devcontainer-backup.tar.gz .devcontainer/

# 完全リセット
> Dev Containers: Rebuild Container (No Cache)
```

## 将来拡張

### 追加サービス候補
```yaml
# Elasticsearch（全文検索）
elasticsearch:
  image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
  environment:
    - discovery.type=single-node
    - xpack.security.enabled=false

# Redis（キャッシュ）
redis:
  image: redis:7-alpine
  command: redis-server --appendonly yes

# PostgreSQL（メタデータDB）
postgres:
  image: postgres:15-alpine
  environment:
    - POSTGRES_DB=appi_kb
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
```

### 有効化条件
- プロジェクト規模拡大
- 検索性能要求
- マルチユーザー対応

## CI/CD 連携

### GitHub Actions
```yaml
# .github/workflows/devcontainer-test.yml
- name: Test in Devcontainer
  uses: devcontainers/ci@v0.3
  with:
    imageName: ghcr.io/${{ github.repository }}/devcontainer
    runCmd: npm test
```

### 品質ゲート
- **ビルド成功**: TypeScriptコンパイル
- **テスト通過**: 単体・結合テスト
- **リント通過**: ESLint・Prettier
- **セキュリティ**: 脆弱性スキャン
